(deftemplate mode2criteria(slot ID (type SYMBOL))(slot GroupID (type SYMBOL))(slot Answer (type SYMBOL)))(deftemplate mode2criteriaAttribute(slot GroupID (type SYMBOL))(slot AttributeName (type SYMBOL) (default NIL))(slot AttributeValue (type INTEGER) (default 0))(slot AttributeCompareType (type SYMBOL) (default NIL))(slot Answer (type SYMBOL)))(deftemplate mode2criteriaGroup(slot GroupID (type SYMBOL)))(deftemplate groupid-symptoms(slot GroupID (type SYMBOL))(slot symptom (type STRING)))(deftemplate questionid-symptoms(slot QuestionID (type SYMBOL))(slot symptom (type STRING)))(deftemplate symptoms(slot symptom (type STRING))(slot ID (type SYMBOL))); ; Final Diagnosis(deftemplate diagnosis(multislot RID (type SYMBOL)))(deftemplate NaviHistory(multislot ID (type SYMBOL) (default NIL END))); ; QuestionQuestionQuestion(deftemplate question(slot ID (type SYMBOL))(slot QuestionText (type STRING))(slot answer (type SYMBOL) (default NIL))(slot GroupID (type SYMBOL)))(deftemplate group(slot GroupID (type SYMBOL))(slot SuccessType (type SYMBOL))(slot SuccessArg (type INTEGER))(slot TrueCount (type INTEGER) (default 0))(slot conclusion (type SYMBOL) (default NIL))(slot answer (type SYMBOL) (default No)));;conclusion Yes/No;;maybe dont need depends(deftemplate Currentquestion(slot ID (type SYMBOL))(slot QuestionText (type STRING))(slot answer (type STRING) (default ""))(slot GroupID (type SYMBOL)))(deftemplate Currentgroup(slot GroupID (type SYMBOL))(slot SuccessType (type SYMBOL))(slot SuccessArg (type INTEGER))(slot TrueCount (type INTEGER) (default 0))(slot conclusion (type SYMBOL) (default NIL))(slot answer (type SYMBOL) (default No))); ; navigation(deftemplate Navigation(slot NavigationID (type SYMBOL) )(slot DestinationGroupID (type SYMBOL) (default NIL));;result ID(multislot RID (type SYMBOL) (default NIL)))(deftemplate NaviChildCritQ	(slot NavigationID (type SYMBOL) ) ;;NAVID	(slot CriteriaGroupID (type SYMBOL) (default NIL)) ;;Group ID for TRUE	(slot CriteriaAnswer (type SYMBOL) (default No)) )(deftemplate NaviChildCritA	(slot NavigationID (type SYMBOL) )	(slot AttributeName (type SYMBOL) (default NIL))	(slot AttributeValue)	(slot AttributeCompareType (type SYMBOL) (default NIL)) ;;==, >=, >, <, <=, eq for string	(slot Answer (type SYMBOL) (default No)))(defrule Pass-And?CUR_Group <- (group (GroupID ?z&~NIL) (SuccessType AND) (answer ~Yes))	(not (exists				(question (ID ?a) (QuestionText ?b) (answer No) (GroupID ?z))	))=>		(modify ?CUR_Group (answer Yes)))(defrule Fail-And?CUR_Group <- (group (GroupID ?z&~NIL) (SuccessType AND) (answer Yes))(exists		(question (ID ?a) (QuestionText ?b) (answer No) (GroupID ?z)))=>	(modify ?CUR_Group (answer No)))(defrule Pass-OR	?CUR_Group <- (group (GroupID ?z&~NIL) (SuccessType OR) (answer ~Yes))	(exists	(question (ID ?a) (QuestionText ?b) (answer Yes) (GroupID ?z)))	=>	(modify ?CUR_Group (answer Yes)))(defrule Fail-OR?CUR_Group <- (group (GroupID ?z&~NIL) (SuccessType OR) (answer Yes))(not (exists		(question (ID ?a) (QuestionText ?b) (answer Yes) (GroupID ?z))))=>;;(printout t crlf "Satisfied "?z"!" crlf)(modify ?CUR_Group (answer No)))(defrule Pass-COUNT-No-to-yes?CUR_Group <- (group (GroupID ?z&~NIL) (SuccessType COUNT) (TrueCount ?b) (SuccessArg ?c) (answer ~Yes))(test(>= ?b ?c))=>(modify ?CUR_Group (answer Yes)))(defrule Pass-COUNT-yes-to-No?CUR_Group <- (group (GroupID ?z&~NIL) (SuccessType COUNT) (TrueCount ?b) (SuccessArg ?c) (answer ~No))(test(< ?b ?c))=>(modify ?CUR_Group (answer No)))(defrule Change-Answer?f1 <- (choice ?ID ?x)?f2 <- (question (ID ?ID) (answer ?y) (GroupID ?z))?f3 <- (group (GroupID ?z) (TrueCount ?count))=>(switch ?y(case NIL then 	;;=>t +1	;;=>f +-	(if(eq Yes ?x)	then;;yes		(modify ?f3 (TrueCount (+ ?count 1)))	else;;No	))(case Yes then 	;;=>t +1	;;=>f +-	(if(eq Yes ?x)	then;;yes			else;;no		(modify ?f3 (TrueCount (- ?count 1)))	))(case No then 	;;=>t +1	;;=>f +-	(if(eq Yes ?x)	then;;yes		(modify ?f3 (TrueCount (+ ?count 1)))	else;;no	)))(retract ?f1)(modify ?f2 (answer ?x)));;remove unesscary previous;;only 1 question in history cant previous anymore(defrule previous_useless?prev<-(previous)?hist<-(NaviHistory (ID NIL ?x END))(not (exists (diagnosis)))=>(retract ?prev));; change page here(defrule previous_question	(not (exists (diagnosis)))	?rmv<-(Currentgroup (GroupID ?y))	?prev<-(previous)	?hist<-(NaviHistory (ID $?x ?p ?y END))	?grp<- (group 	(GroupID ?p)	(SuccessType ?a)	(SuccessArg ?b)	(TrueCount ?c)	(conclusion ?d)	(answer ?e)	)=>	(retract ?rmv)	(retract ?prev)	(printout t crlf "previous" crlf)	(assert 	(Currentgroup 	(GroupID ?p)	(SuccessType ?a)	(SuccessArg ?b)	(TrueCount ?c)	(conclusion ?d)	(answer ?e)	))	(modify ?hist (ID $?x ?p END)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;navigate next question;;initial question;; change page here(defrule Initial_question(mode 1)(Navigation (NavigationID ?naviID) (DestinationGroupID ?z&~NIL) (RID NIL))(not (exists (NaviChildCritQ (NavigationID ?naviID))))(not (exists (NaviChildCritA (NavigationID ?naviID) (Answer No))))(not (exists (Currentgroup)))?hist<-(NaviHistory (ID $?x END))?grp<-(group (GroupID ?z)(SuccessType ?a)(SuccessArg ?b)(TrueCount ?c)(conclusion ?d)(answer ?e))=>	(assert 	(Currentgroup 	(GroupID ?z)	(SuccessType ?a)	(SuccessArg ?b)	(TrueCount ?c)	(conclusion ?d)	(answer ?e)	))	(modify ?hist (ID $?x ?z END)));; change page here(defrule next_question1	(mode 1)	(not (exists (diagnosis)))	?rmv<-(Currentgroup (GroupID ?y))	?nxt<-(next)	(Navigation (NavigationID ?naviID) (DestinationGroupID ?z&~NIL) (RID NIL))		(exists (NaviChildCritQ (NavigationID ?naviID)))	(forall		(NaviChildCritQ (NavigationID ?naviID)(CriteriaGroupID ?CGID) (CriteriaAnswer ?CA))		(group (GroupID ?CGID) (answer ?CA))		(NaviHistory (ID $?START ?CGID $?END))	)		(not (exists (NaviChildCritA (NavigationID ?naviID) (Answer No))))	?hist<-(NaviHistory (ID $?x END))	?grp<-	(group 		(GroupID ?z)		(SuccessType ?a)		(SuccessArg ?b)		(TrueCount ?c)		(conclusion ?d)		(answer ?e)	)=>	(retract ?rmv)	(retract ?nxt)	(printout t crlf "next" crlf)	(assert 		(Currentgroup 		(GroupID ?z)		(SuccessType ?a)		(SuccessArg ?b)		(TrueCount ?c)		(conclusion ?d)		(answer ?e)	))	(modify ?hist (ID $?x ?z END)));; Navigation to a conclusion(defrule next_Conclusion	(declare (salience 1)) ;;When seeing a conclusion, it should always be fired	(not (exists (diagnosis)))	(mode 1)	?rmv<-(Currentgroup (GroupID ?y))	?nxt<-(next)		(Navigation (NavigationID ?naviID) (DestinationGroupID NIL) (RID $?diag))	?hist<-(NaviHistory (ID $?x END))	(exists (NaviChildCritQ (NavigationID ?naviID)));;so it wont run initial question again		(forall		(NaviChildCritQ (NavigationID ?naviID)(CriteriaGroupID ?CGID) (CriteriaAnswer ?CA))		(group (GroupID ?CGID) (answer ?CA))		(NaviHistory (ID $?START ?CGID $?END))	)	(not (exists (NaviChildCritA (NavigationID ?naviID) (Answer No))))	=>	(retract ?rmv)	(retract ?nxt)	(assert (diagnosis (RID $?diag)))	;;Placeholder to tell the UI that Result is found	(assert (Currentgroup (GroupID _RESULT) (SuccessType Yes) (SuccessArg 0) (TrueCount 0) (answer Yes)))	(modify ?hist (ID $?x _RESULT END)))(defrule stop-assertion-after-conclusion	(declare (salience 1))	(exists (diagnosis))	?n <- (next)	=>	(retract ?n)	(printout t "end already la " crlf ));; Retract a conclusions(defrule retract-conclusion	(declare (salience 1)) ;;When seeing a conclusion, it should always be fired	(mode 1)	?p <- (previous)	?diag <- (diagnosis)	=>	(retract ?p)	(retract ?diag)	(assert (previous))	);;;;;;;;;self attribute assertion here;;;Error Here, Rule was never fired(defrule next_question_attr(attribute ?attribu ?value)?target<-(NaviChildCritA  (AttributeName ?attribu) (AttributeValue ?cvalue) (AttributeCompareType ?at) (Answer ?ans))=>	(switch ?at		(case = then 					(if(= ?cvalue ?value)			then;;yes								(switch ?ans					(case Yes then 					)					(case No then 							(modify ?target (Answer Yes))					)				)			else;;no				(switch ?ans					(case Yes then 						(modify ?target (Answer No))					)					(case No then 												)				)			)		)		(case <= then 					(if(<= ?value ?cvalue)			then;;yes								(switch ?ans					(case Yes then 					)					(case No then 							(modify ?target (Answer Yes))					)				)			else;;no				(switch ?ans					(case Yes then 						(modify ?target (Answer No))					)					(case No then 												)				)			)		)		(case >= then 					(if(>= ?value ?cvalue)			then;;yes								(switch ?ans					(case Yes then 					)					(case No then 							(modify ?target (Answer Yes))					)				)			else;;no				(switch ?ans					(case Yes then 						(modify ?target (Answer No))					)					(case No then 												)				)			)		)		(case > then 					(if(> ?value ?cvalue)			then;;yes								(switch ?ans					(case Yes then 					)					(case No then 							(modify ?target (Answer Yes))					)				)			else;;no				(switch ?ans					(case Yes then 						(modify ?target (Answer No))					)					(case No then 												)				)			)		)		(case < then 					(if(< ?value ?cvalue)			then;;yes								(switch ?ans					(case Yes then 					)					(case No then 							(modify ?target (Answer Yes))					)				)			else;;no				(switch ?ans					(case Yes then 						(modify ?target (Answer No))					)					(case No then 												)				)			)		)	));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defrule CurrentQuestion-retract(Currentgroup (GroupID ?y))?question<-(Currentquestion (GroupID ?x&~?y))=>(retract ?question))(defrule CurrentQuestion-assert(Currentgroup (GroupID ?y))(question (GroupID ?y) (ID ?a) (QuestionText ?b) (answer ?c))(not (exists (Currentquestion (ID ?a))))=>(assert (Currentquestion (GroupID ?y) (ID ?a) (QuestionText ?b) (answer ?c))))(defrule Mode2-Pass(mode 2)(mode2criteriaGroup (GroupID ?z&~NIL))(forall 	(mode2criteria (Answer ?x) (ID ?y) (GroupID ?z))	(group (answer ?x) (GroupID ?y)))(not (exists	(mode2criteriaAttribute (Answer No) (GroupID ?z))))	=>(printout t crlf "Satisfied"?z"!" crlf)(assert (diagnosis (RID OMG))))(defrule Mode2-Attribute-Pass(mode 2)?crit<- (mode2criteriaAttribute (AttributeName ?an) (AttributeValue ?attvalue) (AttributeCompareType ?at) (Answer NIL))?att<- (attribute ?an ?av)=>(switch ?at	(case = then 			(if(= ?attvalue ?av)		then;;yes			(modify ?crit (Answer Yes))		else;;No			(modify ?crit (Answer No))		)	)	(case <= then 			(if(<= ?attvalue ?av)		then;;yes			(modify ?crit (Answer Yes))			else;;No			(modify ?crit (Answer No))		)	)	(case >= then 			(if(>= ?attvalue ?av)		then;;yes			(modify ?crit (Answer Yes))			else;;No			(modify ?crit (Answer No))		)	)	(case > then 			(if(> ?attvalue ?av)		then;;yes			(modify ?crit (Answer Yes))		else;;No			(modify ?crit (Answer No))		)	)	(case < then 			(if(< ?attvalue ?av)		then;;yes			(modify ?crit (Answer Yes))		else;;No			(modify ?crit (Answer No))			)	)))(defrule Add-symptoms-groupid-notcount(group (answer Yes) (GroupID ?id) (SuccessType ~COUNT) )(groupid-symptoms (GroupID ?id) (symptom ?sym))(not (exists (symptoms (ID ?id))))=>(assert (symptoms (symptom ?sym) (ID ?id))))(defrule Add-symptoms-groupid-count(group (answer No) (GroupID ?id) (SuccessType COUNT) )(groupid-symptoms (GroupID ?id) (symptom ?sym))(not (exists (symptoms (ID ?id))))=>(assert (symptoms (symptom ?sym) (ID ?id))))(defrule Retract-symptoms-groupid-not-count(group (answer No) (GroupID ?Noid) (SuccessType ~COUNT) )(groupid-symptoms (GroupID ?Noid))?sym <- (symptoms (ID ?Noid))=>(retract ?sym);;(printout t crlf "ans:"?sym crlf))(defrule Retract-symptoms-groupid-count(group (answer Yes) (GroupID ?Noid) (SuccessType COUNT) )(groupid-symptoms (GroupID ?Noid))?sym <- (symptoms (ID ?Noid))=>(retract ?sym);;(printout t crlf "ans:"?sym crlf))(defrule Add-symptoms-questionid(question (answer Yes) (ID ?id) )(questionid-symptoms (QuestionID ?id) (symptom ?sym))(not (exists (symptoms (ID ?id))))=>(assert (symptoms (symptom ?sym) (ID ?id))))(defrule Retract-symptoms-questionid(question (answer No) (ID ?Noid) )(questionid-symptoms (QuestionID ?Noid))?sym <- (symptoms (ID ?Noid))=>(retract ?sym);;(printout t crlf "ans:"?sym crlf)); ; The initial facts(deffacts the-facts(NaviHistory))